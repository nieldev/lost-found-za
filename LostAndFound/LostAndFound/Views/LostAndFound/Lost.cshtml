@model LostAndFound.ViewModels.LostReportViewModel

@{
    ViewBag.Title = "Lost Pets";
    var dateLost = @Model.DateLost.ToString("yyyy/dd/MM");
    var timeLost = Model.TimeLost.ToString("HH:mm:ss");
}

<div class="row">
    <div class="col-lg-12">
        <div class="ibox">
            <div class="ibox-title">
                <h5>Lost pet</h5>
              
                <div class="ibox-tools">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                        <i class="fa fa-wrench"></i>
                    </a>
                    <ul class="dropdown-menu dropdown-user">
                        <li>
                            <a href="#">Config option 1</a>
                        </li>
                        <li>
                            <a href="#">Config option 2</a>
                        </li>
                    </ul>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            <div class="ibox-content">
                <h2>
                    Report a lost pet
                </h2>
                <p>
                    Please follow the steps to report a lost pet.
                </p>
                <form id="form" action="@Url.Action("Lost")"method="post" class="wizard-big">
                    <h1>Basic</h1>
                    <fieldset>
                        <h2>Basic Information</h2>
                      
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PetName, new {@class = "font-normal"})
                                        @Html.TextBoxFor(m => m.PetName, new {@class = "form-control required"})
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Species, new {@class = "font-normal"})
                                        @Html.DropDownListFor(s => s.Species,
                                            ViewData["Species"] as List<SelectListItem>, new {@class = "chosen-select form-control required", placeholder = "Choose a Species..."})
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Breed, new {@class = "font-normal"})
                                        @Html.DropDownListFor(b => b.Breed,
                                            ViewData["Breed"] as List<SelectListItem>, new {@class = "chosen-select form-control required", placeholder = "Choose a Breed..."})
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="form-group" id="petDateLost">
                                        @Html.LabelFor(m => m.DateLost, new {@class = "font-normal"})
                                        <div class="input-group date">
                                            <span class="input-group-addon">
                                                <i class="fa fa-calendar"></i>
                                            </span>
                                            @Html.TextBoxFor(m=> dateLost, new {@class = "form-control datepickertextbox required", value=dateLost})
                                        </div>
                                    </div>
                                    </div>
                                    <div class="col-lg-4">
                                    <div class="form-group clockpicker" data-autoclose="true">
                                        @Html.LabelFor(m => m.TimeLost, new {@class = "font-normal"})
                                        <div class="input-group date">
                                            <span class="input-group-addon">
                                                <i class="fa fa-clock-o"></i>
                                            </span>
                                            @Html.TextBoxFor(m => timeLost, new {@class = "form-control required",  value = timeLost })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <div class="row">
                            <div class="col-lg-8">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Location, new {@class = "font-normal"})
                                    @Html.TextBoxFor(m => m.Location, new {@class = "form-control required"})
                                </div>
                            </div>
                        </div>

                        <div class="row">
                        <div class="col-lg-8">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Photos, new {@class = "font-normal"})
                                <div class="dropzone" id="photoUpload"></div>
                            </div>
                        </div>
                            </div>


</fieldset>
                    <h1>Detailed</h1>
                    <fieldset>
                        <h2>Detailed Information</h2>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.PetName, new {@class = "font-normal"})
                                    @Html.TextBoxFor(m => m.PetName, new {@class = "form-control required"})
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <h1>Contact Information</h1>
                    <fieldset>
                        <div class="text-center" style="margin-top: 120px">
                            <h2>You did it Man :-)</h2>
                        </div>
                    </fieldset>
                    <h1>Summary</h1>
                    <fieldset>
                        <h2>Terms and Conditions</h2>
                        <input id="acceptTerms" name="acceptTerms" type="checkbox" class="required"> <label for="acceptTerms">I agree with the Terms and Conditions.</label>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
</div>


@section Styles {
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/plugins/wizardStepsStyles")
    @Styles.Render("~/plugins/clockpickerStyles")
    @Styles.Render("~/Content/plugins/chosen/chosenStyles")
@Styles.Render("~/Content/plugins/dropzone/dropZoneStyles")
}
@section Scripts {
    @Scripts.Render("~/plugins/wizardSteps")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/chosen")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/clockpicker")
    @Scripts.Render("~/plugins/dropZone")
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCF77tE8VG1UVRZcSDdB5j3DF3qBc0aIck&libraries=places&callback=initMap"
            async defer></script>

    <script type="text/javascript">
        Dropzone.autoDiscover = false;

        $(document).ready(function() {

            $("#wizard").steps();
            $("#form").steps({
                bodyTag: "fieldset",
                onStepChanging: function(event, currentIndex, newIndex) {
                    // Always allow going backward even if the current step contains invalid fields!
                    if (currentIndex > newIndex) {
                        return true;
                    }

                    var form = $(this);

                    // Clean up if user went backward before
                    if (currentIndex < newIndex) {
                        // To remove error styles
                        $(".body:eq(" + newIndex + ") label.error", form).remove();
                        $(".body:eq(" + newIndex + ") .error", form).removeClass("error");
                    }

                    // Disable validation on fields that are disabled or hidden.
                    form.validate().settings.ignore = ":disabled,:hidden";

                    // Start validation; Prevent going forward if false
                    return form.valid();
                },
                //onStepChanged: function (event, currentIndex, priorIndex) {

                //    if (currentIndex === 2 && priorIndex === 3) {
                //        $(this).steps("previous");
                //    }

                //},
                onFinishing: function(event, currentIndex) {
                    var form = $(this);
                   // alert("finishing");
                    // Disable validation on fields that are disabled.
                    // At this point it's recommended to do an overall check (mean ignoring only disabled fields)
                  //  form.validate().settings.ignore = ":disabled";

                    // Start validation; Prevent form submission if false
                    return form.valid();
                },
                onFinished: function(event, currentIndex) {
                    var form = $(this);
                 //   alert("Finished");
                    // Submit form input
                    form.submit();
                }
            }).validate({
                errorPlacement: function(error, element) {
                    element.before(error);
                },
                rules: {
                  
                }
            });

            $(".datepickertextbox").datepicker({
                todayBtn: "linked",
                keyboardNavigation: true,
                forceParse: false,
                calendarWeeks: true,
                dateFormat: 'yy/mm/dd',
                autoclose: true
            });

            $('.clockpicker').clockpicker();
            $('.chosen-select').chosen({ width: "100%" });

            $("#photoUpload").dropzone({
                dictDefaultMessage : "Drag image(s) here or click to upload",
                acceptedFiles: ".png,.jpg,.gif,.bmp,.jpeg",
                maxFilesize: 5,
                maxFiles: 20,
                url: "@Url.Action("SaveDropzoneJsUploadedFiles")",
                success: function(file, response) {
                    console.log(response);
                }
            });
        });

        function initMap() {
            var input = document.getElementById('Location');
            var autocomplete = new google.maps.places.Autocomplete(input);

            autocomplete.addListener('place_changed',
                function() {

                    var place = autocomplete.getPlace();

                    var address = '';
                    try {
                        console.log(JSON.stringify(place));
                    } catch (e) {
                    }


                    if (place.formatted_address) {
                        address = place.formatted_address;
                        input.val(address);
                    }
                });

        }
    </script>
}
